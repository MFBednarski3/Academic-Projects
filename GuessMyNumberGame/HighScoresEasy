/**
 * The class for high scores
 */

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class HighScoresEasy implements Serializable {
	//Basic initializing for the name and score
	String name;
	int score;
	
	//Two arrayLists: One for the highscorelist in the order of the file. Another for them sorted
	public ArrayList<HighScoresEasy> highScoreList;
	ArrayList<HighScoresEasy> sortedScores;
	
	JFrame scoreFrame = new JFrame();
	JLabel firstPlace = new JLabel();
	JLabel secondPlace = new JLabel();
	JLabel thirdPlace = new JLabel();
	JLabel scoringNote = new JLabel("Note: Scoring is 11 - tries to get answer");
	
	public HighScoresEasy(){ //We want to declare highscorelist as a placement for highscores on easy
		highScoreList = new ArrayList<HighScoresEasy>();
	}
	
	public HighScoresEasy(String name, int score){ //Constructor with parameters
		this.name = name;
		this.score = score;
	}
	
	public int getScore(){ //getter method for score
		return score;
	}
	

	public void addScore(int finalScore) throws ClassNotFoundException, IOException { //Method to add the score in
		if (this.newScore(finalScore)){ //This will only work on multiple conditions as outlined in the newscore method. 
			String name = JOptionPane.showInputDialog("You got a high score! Enter your name below (No Spaces)"); //New dialogue to provide name
			//Adding in more than one word results in an error. That's why it's noted to have NO SPACES
			highScoreList.add(new HighScoresEasy(name, finalScore)); //We add this to the highscorelist which will be sorted again later
			addScoreToFile(new HighScoresEasy(name, finalScore)); //We add this score to the file
		}
	}

	
	private boolean newScore(int score) throws IOException, ClassNotFoundException {
		readFile(); //We read the file and put in the scores
		if (highScoreList.size() < 10){ //If the list is less than 10, we add the score in and end it there.
			return true;
		}
		sortedScores = getSortedScores(); //We sort the scores
		HighScoresEasy lowScore = sortedScores.get(9); //We get the 10th slot of the score to make it low
		if (score >= lowScore.score){ //If the score is bigger, we add the score
			return true;
		}
		return false; //If all conditions fail above, we don't add the score at all.
	}

	public void HighScoreBox() throws ClassNotFoundException, IOException, InterruptedException{ //Creates a high score box
		scoreFrame.setTitle("High Scores"); 
		scoreFrame.setLayout(new GridLayout(12,1));
		scoreFrame.setSize(315, 315);
		scoreFrame.getContentPane().setBackground(new Color(135, 206, 235)); //I used a light blue color using RGB values
		
		scoringNote.setForeground(Color.RED);
		scoreFrame.add(scoringNote);
		
		sortedScores = getSortedScores(); //We sort the scores
		
		if(sortedScores.size() < 10){ //First condition: If there are list than 10 scores
			for (int i = 0; i < sortedScores.size(); i++){ //For each score depending on the size (1-9)
				if (i == 0){ //If it is the first score
					firstPlace.setText(1 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					firstPlace.setForeground(new Color(255,215,0)); //We make it special by making it Gold
					scoreFrame.add(firstPlace);
				}
				else if (i == 1){ //If it is the second score
					secondPlace.setText(2 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					secondPlace.setForeground(Color.GRAY); //We make it gray (wanted to do silver but it doesn't blend with blue)
					scoreFrame.add(secondPlace);
				}
				else if (i == 2){ //If it is the third score
					thirdPlace.setText(3 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					thirdPlace.setForeground(new Color(205, 127, 50)); //We make it bronze
					scoreFrame.add(thirdPlace);
				}
				else{ //Any other scores will just be added in plain black text
					scoreFrame.add(new JLabel((i + 1) + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore()));
				}
			}
		}
		else{ //Second condition: If there are at least 10 scores
			for (int i = 0; i< 10; i++){ //We only put in the first 10 scores (basically a top 10 list). Code is same as above
				if (i == 0){
					firstPlace.setText(1 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					firstPlace.setForeground(new Color(255,215,0)); 
					scoreFrame.add(firstPlace);
				}
				else if (i == 1){
					secondPlace.setText(2 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					secondPlace.setForeground(Color.GRAY); 
					scoreFrame.add(secondPlace);
				}
				else if (i == 2){
					thirdPlace.setText(3 + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore());
					thirdPlace.setForeground(new Color(205, 127, 50)); 
					scoreFrame.add(thirdPlace);
				}
				else{
					scoreFrame.add(new JLabel((i + 1) + ". " + sortedScores.get(i).getName() +
							"    " + sortedScores.get(i).getScore()));
				}
			}	
		}
		JButton close = new JButton("Close");
		
		//Close button function as shown in menu
		close.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				scoreFrame.dispose();
			}
		});
		
		scoreFrame.add(close);
		scoreFrame.setVisible(true);
		
	}
	
	private String getName() { //Getter for name
		return name;
	}

	private ArrayList<HighScoresEasy> getSortedScores() throws ClassNotFoundException, IOException {//Sorting scores
		CompareEasyScores sorter = new CompareEasyScores(); //This creates an object to sort the scores
		Collections.sort(highScoreList, sorter); //Using the comparator, we sort the scores
		return highScoreList; //We return the new sorted scores
	}
	
	public String toString(){ //Tostring method for scores. Failure to do this results in the program getting messed up
		return name + " " + score;
	}
	
	public void readFile() throws IOException{ //This is for reading in the file
		File file = new File("GMNGscoresE.txt"); //We find the file with the name. 
		Scanner input = new Scanner(file); //Scanner is the best to use for each element
		while (input.hasNext()){ //While there is more to read
			String name = input.next(); //We get the name
			int score = input.nextInt(); //And we get the score
			highScoreList.add(new HighScoresEasy(name,score)); //and we add it in
		}
		input.close(); //We close the file

	}
	
	public void addScoreToFile(HighScoresEasy newScore) throws IOException{ //This is for adding the score to the file
		FileWriter fw = new FileWriter("GMNGscoresE.txt", true); //Filewriter is the best for appending to the file
		//If we didn't append, the whole file gets overwritten!
		PrintWriter pw = new PrintWriter(fw); //We use the printwriter for it
		pw.print(newScore.name + " "); //We use these statements to add the score as represented
		pw.println(newScore.score);
		pw.close(); //We close the file
	}
}
