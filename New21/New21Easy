
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;


import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class New21Easy {
	static ArrayList<Integer> cards = new ArrayList<Integer>(52); //The full list of cards
	static ArrayList<Integer> currentCards = new ArrayList<Integer>(); //The current cards that are currently used in play

	static int playerCardTotal = 0; //Card Total amount when added up
	static int aiCardTotal = 0; 
	static ArrayList<Integer> playerCards = new ArrayList<Integer>(); //List of cards the player has
	static ArrayList<Integer> aiCards = new ArrayList<Integer>();

	static int playerScore = 0; //Overall Game score
	static int aiScore = 0;

	JLabel label1 = new JLabel();
	static JLabel label2 = new JLabel();
	static JLabel label3 = new JLabel();
	static JLabel label4 = new JLabel();
	static JButton button1 = new JButton("Hit");
	static JButton button2 = new JButton("Stand");
	static JButton button3 = new JButton("Next Round");
	JButton button4 = new JButton("End");
	JFrame frame = new JFrame("New 21 Easy");
	

	public New21Easy() {
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(600, 300);
		frame.setLayout(new GridLayout(8, 1));
		frame.getContentPane().setBackground(Color.GREEN);

		label1.setText("Try to beat your opponent without going over 21. Busts lose 1 point. Wins gain 1 point");
		label1.setHorizontalTextPosition(JLabel.CENTER);
		label1.setHorizontalAlignment(JLabel.CENTER);

		label2.setText("");
		label2.setHorizontalTextPosition(JLabel.CENTER);
		label2.setHorizontalAlignment(JLabel.CENTER);

		label3.setText("");
		label3.setHorizontalTextPosition(JLabel.CENTER);
		label3.setHorizontalAlignment(JLabel.CENTER);

		label4.setText("Make your move");
		label4.setHorizontalTextPosition(JLabel.CENTER);
		label4.setHorizontalAlignment(JLabel.CENTER);

		frame.add(label1);
		frame.add(label2);
		frame.add(label3);
		frame.add(label4);
		frame.add(button1);
		frame.add(button2);
		frame.add(button3);
		frame.add(button4);
		frame.setVisible(true);

		startGame(); //We call this method to get the game set up

		button1.addActionListener(new ActionListener() { //If the player wants to hit
			public void actionPerformed(ActionEvent e) {
				Random randomNum = new Random(); 
				int cardSpot = randomNum.nextInt(currentCards.size()); //Generate a random number to the size of the cards in play
				playerCards.add(currentCards.get(cardSpot)); //Add that to the playerCards
				updateCardScore("Player"); //Update the score
				currentCards.remove(cardSpot); //Remove that card out of the current cards
				label2.setText("Your Card Score: " + playerCardTotal + ". Your Cards: " + playerCards
						+ ". Your Overall Score: " + playerScore); //Update the text
				if (playerCardTotal > 21) { //If the player busts
					playerCardTotal = -1; // -1 means a bust
					playerScore--; //We take away a point
					dumbAI(); //We call in the dumb AI
					result(); //We finish the round
				} else if (playerCardTotal == 21) { //If the total is 21. This is added to prevent a dumb player for going over 21 if they hit
					// Plus in real Blackjack, you automatically stand if your card count is 21. 
					dumbAI();
					result();
				}

			}

		});

		button2.addActionListener(new ActionListener() { //Stand button. We move it to the AI
			public void actionPerformed(ActionEvent e) {

				dumbAI();
				result();
			}

		});

		button3.addActionListener(new ActionListener() { //This button puts in the next game.
			//I originally didn't want to do this but because it is very difficult and complicated to pause the program, I have to do it this way.
			public void actionPerformed(ActionEvent e) {
				nextGame();
			}

		});
		
		button4.addActionListener(new ActionListener() { //The game over button. Some recycled code from GMNG
			public void actionPerformed(ActionEvent e) {
				int finalScore = playerScore - aiScore; //The score is the difference between the player score and the ai score. 
				//Since this game can go on forever, the score could be high
				HighScoresEasy scores = new HighScoresEasy();
				try {
					scores.addScore(finalScore);
				} catch (ClassNotFoundException | IOException e1) {
					e1.printStackTrace();
				}
				try {
					scores.HighScoreBox();
				} catch (ClassNotFoundException | IOException | InterruptedException e1) {
					e1.printStackTrace();
				}
				frame.dispose();
			}

		});

	}

	static void startGame() { //Starting the game
		button3.setEnabled(false); //We disable the next round button
		setOriginalCards(); //Set the original cards
		resetCards(); //Reset the cards
		distributeCards(); //Distribute them
		label2.setText("Your Card Score: " + playerCardTotal + ". Your Cards: " + playerCards + ". Your Overall Score: "
				+ playerScore); // Update the text
		label3.setText("AI Card Score " + aiCardTotal + ". AI Cards: " + aiCards + ". AI Overall Score: " + aiScore);
	}

	static void nextGame() { //Next round
		button3.setEnabled(false); //We disable the next round button
		button1.setEnabled(true); //Hit and stand buttons are re-enabled. 
		button2.setEnabled(true);
		if (currentCards.size() <= 10) { //If the current Card deck is less or equal to 10, reshuffle. 
			//This is to ensure that the program does not crash if the card deck has nothing left. If this happens, out of bounds error will show
			resetCards();
		}
		distributeCards(); //Distribute the cards
		label2.setText("Your Card Score: " + playerCardTotal + ". Your Cards: " + playerCards + ". Your Overall Score: "
				+ playerScore);
		label3.setText("AI Card Score " + aiCardTotal + ". AI Cards: " + aiCards + ". AI Overall Score: " + aiScore);
		label4.setText("Make your move");

	}


	public static void dumbAI() { //This AI is a dumb AI since it will go up to 17 or if the total is greater than the player total. 
		button1.setEnabled(false); //Hit and stand button is disabled
		button2.setEnabled(false); 
		label4.setText("AI's Turn");
		while (aiCardTotal < 17 || aiCardTotal < playerCardTotal) { //Similar method to the player
			Random randomNum = new Random();
			int cardSpot = randomNum.nextInt(currentCards.size());
			aiCards.add(currentCards.get(cardSpot));
			updateCardScore("AI");
			currentCards.remove(cardSpot);
			label3.setText(
					"AI Card Score " + aiCardTotal + ". AI Cards: " + aiCards + ". AI Overall Score: " + aiScore);
			if (aiCardTotal > 21) {
				aiCardTotal = -1;
				aiScore--;
				break;
			} else if (aiCardTotal == 21) {
				break;
			}
		}
	}

	static void setOriginalCards() { //This method adds in the cards to the deck
		for (int i = 0; i < 4; i++) { //4 Decks
			for (int j = 1; j < 14; j++) { //Cards from 1 to 10
				if (j == 11 || j == 12 || j == 13) { //10s are used in place of 11, 12 and 13
					cards.add(10);
				} else {
					cards.add(j);
				}
			}
		}
	}

	static void resetCards() { //This is to reset the card deck
		currentCards.clear(); //We clear the currnt cards
		for (int i = 0; i < 52; i++) { //And we re add in the new deck
			currentCards.add(cards.get(i));
		}
	}

	static void updateCardScore(String turn) { //This updates the score
		if (turn.equals("Player")) {
			playerCardTotal = 0; //This is set to zero as we reset the score and then take in the value of the player's cards. 
			for (int i = 0; i < playerCards.size(); i++) {
				playerCardTotal += playerCards.get(i);
			}
		} else {
			aiCardTotal = 0;
			for (int i = 0; i < aiCards.size(); i++) {
				aiCardTotal += aiCards.get(i);
			}
		}
	}

	static void distributeCards() { //This gives out the first cards to the players
		playerCards.clear(); //New set is provided as we reset
		playerCardTotal = 0;
		aiCards.clear();
		aiCardTotal = 0;
		Random randomNum = new Random();
		int cardSpot = randomNum.nextInt(currentCards.size());
		playerCards.add(currentCards.get(cardSpot));
		playerCardTotal = playerCards.get(0);
		currentCards.remove(cardSpot);
		cardSpot = randomNum.nextInt(currentCards.size());
		aiCards.add(currentCards.get(cardSpot));
		aiCardTotal = aiCards.get(0);
		currentCards.remove(cardSpot);

	}

	public static void result() { //The result method. Each win is +1.
		if (playerCardTotal > aiCardTotal) {
			label4.setText("Player Wins");
			playerScore++;
		} else if (playerCardTotal < aiCardTotal) {
			label4.setText("AI wins!");
			aiScore++;
		} else {
			label4.setText("Tie!");
		}
		label2.setText("Your Card Score: " + playerCardTotal + ". Your Cards: " + playerCards + ". Your Overall Score: "
				+ playerScore);
		label3.setText("AI Card Score " + aiCardTotal + ". AI Cards: " + aiCards + ". AI Overall Score: " + aiScore);
		button3.setEnabled(true); //We allow the user to go to the next round
	}
}
